# -*- coding: utf-8 -*-
"""Tugas | Week 9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZiFZGrvtZmUe4bY4zZZa0YeOQTRt9EW-

1. Eksperimen sederhana Linear Probing
"""

class LinearProbingHashTable:
    def __init__(self, size):
        self.size = size
        self.table = [None] * size

    def hash_function(self, key):
        return hash(key) % self.size

    def insert(self, key, value):
        index = self.hash_function(key)
        start_index = index
        while self.table[index] is not None:
            index = (index + 1) % self.size
            if index == start_index:
                raise Exception("Hash Table sudah penuh")
        self.table [index] = (key, value)

    def __str__(self):
        return str(self.table)

ht = LinearProbingHashTable(5)
data = {"A": 10, "B": 20, "C": 30, "D": 40, "E": 50}

for key, value in data.items():
    ht.insert(key, value)

print("Isi self.table setelah semua data dimasukkan:")
print(ht.table)

"""Jika ada dua key memiliki hash yang sama, maka keduanya akan mengarah ke indeks yang sama dalam tabel hash hal ini dinamakan dengan collison (tabrakan).
Dalam Linear Probing, jika ada dua key yang memiliki key yang sama, maka data pertama akan disimpan di indeks hasil hash, data kedua akan mencari slot kosong berikutnya secara berurutan (linear)
Sedangkan dalam Chaining, Jika terdapat dua key memilki hash yang sama, maka keduanya akan disimpan pada slot yang sama, namun dalam bentuk list (rantai), yang artinya satu indeks akan menyimpan lebih dari satu pasangan key-value.

2. Percobaan Dasar Chaining
"""

class ChainingHashTable:
    def __init__(self, size):
        self.size = size
        self.table = [[] for _ in range(size)]

    def hash_function(self, key):
        return hash(key) % self.size

    def insert(self, key, value):
        index = self.hash_function(key)
        self.table[index].append((key, value))

    def __str__(self):
        result = ""
        for i, slot in enumerate(self.table):
            result += f"Index {i}: {slot}\n"
        return result

cht = ChainingHashTable(3)
data = {"apel": 100, "melon": 200, "lemon": 300, "pisang": 400}

for key, value in data2.items():
    cht.insert(key, value)

print("Isi self.table setelah semua data dimasukkan:")
print(cht)

"""Dalam Chaining, collison ditangani dengan cara menyimpan dua key yang memiliki hash yang sama pada satu slot dalam bentuk list, artinya satu indeks akan menyimpan lebih dari satu pasangan key-hash."""

